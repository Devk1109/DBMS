## function to add a new patient

CREATE OR REPLACE FUNCTION AddPatient(
    p_PatientId IN INT,
    p_PhoneNo IN VARCHAR,
    p_Name IN VARCHAR,
    p_Address IN VARCHAR,
    p_Gender IN VARCHAR
) RETURN VARCHAR AS
BEGIN
    INSERT INTO Patient (PatientId, PhoneNo, Name, Address, Gender)
    VALUES (p_PatientId, p_PhoneNo, p_Name, p_Address, p_Gender);
    RETURN 'Patient added successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/


## function to schedule an appointment

CREATE OR REPLACE FUNCTION ScheduleAppointment(
    p_AppointmentId IN INT,
    p_Dates IN DATE,
    p_StartTime IN DATE,
    p_EndTime IN DATE,
    p_Status IN VARCHAR
) RETURN VARCHAR AS
BEGIN
    INSERT INTO Appointments (AppointmentId, Dates, Start_time, End_time, Status)
    VALUES (p_AppointmentId, p_Dates, p_StartTime, p_EndTime, p_Status);
    RETURN 'Appointment scheduled successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/


##function to link a patient to an appointment

CREATE OR REPLACE FUNCTION LinkPatientToAppointment(
    p_PatientId IN INT,
    p_AppointmentId IN INT,
    p_Concerns IN VARCHAR,
    p_Symptoms IN VARCHAR
) RETURN VARCHAR AS
BEGIN
    INSERT INTO PatientsAttendAppointments (PatientId, AppointmentId, Concerns, Symptoms)
    VALUES (p_PatientId, p_AppointmentId, p_Concerns, p_Symptoms);
    RETURN 'Patient linked to appointment successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/



## Function to Retrieve a Doctor’s Schedule

CREATE OR REPLACE FUNCTION GetDoctorSchedule(
    p_DoctorId IN INT
) RETURN SYS_REFCURSOR AS
    schedule_cursor SYS_REFCURSOR;
BEGIN
    OPEN schedule_cursor FOR
    SELECT S.Day, S.Start_Time, S.End_Time
    FROM DoctorsHaveSchedules DHS
    JOIN Schedules S ON DHS.ScheduleId = S.ScheduleId
    WHERE DHS.DoctorId = p_DoctorId;
    RETURN schedule_cursor;
END;
/


## Function to Retrieve a Patient’s Full History

CREATE OR REPLACE FUNCTION ViewPatientHistory(
    p_PatientId IN INT
) RETURN SYS_REFCURSOR AS
    history_cursor SYS_REFCURSOR;
BEGIN
    OPEN history_cursor FOR
    SELECT MH.Dates, MH.Time_recorded, MH.Condition, MH.Surgeries, MH.Medication
    FROM PatientsFullHistory PFH
    JOIN MedicalHistory MH ON PFH.HistoryId = MH.HistoryId
    WHERE PFH.PatientId = p_PatientId;
    RETURN history_cursor;
END;
/


## Function to Assign a Schedule to a Doctor

CREATE OR REPLACE FUNCTION AssignScheduleToDoctor(
    p_ScheduleId IN INT,
    p_DoctorId IN INT
) RETURN VARCHAR AS
BEGIN
    INSERT INTO DoctorsHaveSchedules (ScheduleId, DoctorId)
    VALUES (p_ScheduleId, p_DoctorId);
    RETURN 'Schedule assigned to doctor successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/


## Function to Record a Diagnosis

CREATE OR REPLACE FUNCTION AddDiagnosis(
    p_AppointmentId IN INT,
    p_DoctorId IN INT,
    p_Diagnosis IN VARCHAR,
    p_Prescription IN VARCHAR
) RETURN VARCHAR AS
BEGIN
    INSERT INTO Diagnose (AppointmentId, Doctors, Diagnosis, Prescription)
    VALUES (p_AppointmentId, p_DoctorId, p_Diagnosis, p_Prescription);
    RETURN 'Diagnosis recorded successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/


## Function to Record a Medical History

CREATE OR REPLACE FUNCTION RecordMedicalHistory(
    p_HistoryId IN INT,
    p_Dates IN DATE,
    p_TimeRecorded IN DATE,
    p_Condition IN VARCHAR,
    p_Surgeries IN VARCHAR,
    p_Medication IN VARCHAR
) RETURN VARCHAR AS
BEGIN
    INSERT INTO MedicalHistory (HistoryId, Dates, Time_recorded, Condition, Surgeries, Medication)
    VALUES (p_HistoryId, p_Dates, p_TimeRecorded, p_Condition, p_Surgeries, p_Medication);
    RETURN 'Medical history recorded successfully';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/


############################################################################################################################################################################################################### 
Date-26-04-25


CREATE OR REPLACE PROCEDURE AssignDoctorToPatient (
    in_DesiredDate   IN DATE,
    in_StartTime     IN DATE,
    in_EndTime       IN DATE,
    out_DoctorId     OUT Doctor.Doctor_ID%TYPE
)
IS
BEGIN
    -- Find an available doctor
    SELECT d.Doctor_ID
    INTO out_DoctorId
    FROM Doctor d
    JOIN DoctorsHaveSchedules dhs ON d.Doctor_ID = dhs.DoctorId
    JOIN Schedules s ON dhs.ScheduleId = s.ScheduleId
    WHERE TRIM(TO_CHAR(in_DesiredDate, 'Day')) = s.Day
      AND s.Start_Time <= in_StartTime
      AND s.End_Time >= in_EndTime
      AND NOT EXISTS (
          SELECT 1
          FROM Diagnose diag
          JOIN Appointments app ON diag.AppointmentId = app.AppointmentId
          WHERE diag.Doctors = d.Doctor_ID
            AND app.Dates = in_DesiredDate
            AND (
                  (app.Start_Time BETWEEN in_StartTime AND in_EndTime)
               OR (app.End_Time BETWEEN in_StartTime AND in_EndTime)
                )
      )
    AND ROWNUM = 1;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        out_DoctorId := NULL; -- No doctor found
END;
/

CREATE OR REPLACE PROCEDURE BookAppointment (
    in_PatientId   IN Patient.PatientId%TYPE,
    in_DesiredDate IN DATE,
    in_StartTime   IN DATE,
    in_EndTime     IN DATE,
    in_Concerns    IN VARCHAR2,
    in_Symptoms    IN VARCHAR2
)
IS
    selectedDoctorId Doctor.Doctor_ID%TYPE;
    newAppointmentId Appointments.AppointmentId%TYPE;
BEGIN
    -- Step 1: Call helper to assign doctor
    AssignDoctorToPatient(
        in_DesiredDate => in_DesiredDate,
        in_StartTime   => in_StartTime,
        in_EndTime     => in_EndTime,
        out_DoctorId   => selectedDoctorId
    );

    -- Step 2: Check if doctor assigned
    IF selectedDoctorId IS NULL THEN
        raise_application_error(-20002, 'No available doctor for the selected time slot.');
    END IF;

    -- Step 3: Insert into Appointments
    INSERT INTO Appointments (Dates, Start_Time, End_Time, Status)
    VALUES (in_DesiredDate, in_StartTime, in_EndTime, 'Scheduled')
    RETURNING AppointmentId INTO newAppointmentId;

    -- Step 4: Insert into PatientsAttendAppointments
    INSERT INTO PatientsAttendAppointments (PatientId, AppointmentId, Concerns, Symptoms)
    VALUES (in_PatientId, newAppointmentId, in_Concerns, in_Symptoms);

    -- Step 5: Insert into Diagnose
    INSERT INTO Diagnose (AppointmentId, Doctors, Diagnosis, Prescription)
    VALUES (newAppointmentId, selectedDoctorId, NULL, NULL);

END;
/




        ***PATIENT INFO***             26-04-2025


CREATE OR REPLACE PROCEDURE InsertOrUpdatePatientHistory (
    -- Patient Info
    p_PatientId IN INT,
    p_PhoneNo IN VARCHAR2,
    p_Name IN VARCHAR2,
    p_Address IN VARCHAR2,
    p_Gender IN VARCHAR2,

    -- Medical History Info
    p_HistoryId IN INT,
    p_HistoryDate IN DATE,
    p_TimeRecorded IN DATE,
    p_Condition IN VARCHAR2,
    p_Surgeries IN VARCHAR2,
    p_Medication IN VARCHAR2
) IS
    v_ExistsPatient INT;
    v_ExistsHistory INT;
    v_ExistsPatientHistory INT;
BEGIN
    -- Start Transaction
    BEGIN
        -- Check if the patient already exists
        SELECT COUNT(*) INTO v_ExistsPatient
        FROM Patient
        WHERE PatientId = p_PatientId;

        IF v_ExistsPatient > 0 THEN
            -- Update Patient record
            UPDATE Patient
            SET PhoneNo = p_PhoneNo,
                Name = p_Name,
                Address = p_Address,
                Gender = p_Gender
            WHERE PatientId = p_PatientId;
        ELSE
            -- Insert a new Patient record
            INSERT INTO Patient (PatientId, PhoneNo, Name, Address, Gender)
            VALUES (p_PatientId, p_PhoneNo, p_Name, p_Address, p_Gender);
        END IF;

        -- Check if the Medical History already exists
        SELECT COUNT(*) INTO v_ExistsHistory
        FROM Medical_History
        WHERE HistoryId = p_HistoryId;

        IF v_ExistsHistory > 0 THEN
            -- Update Medical History record
            UPDATE Medical_History
            SET Dates = p_HistoryDate,
                Time_recorded = p_TimeRecorded,
                Condition = p_Condition,
                Surgeries = p_Surgeries,
                Medication = p_Medication
            WHERE HistoryId = p_HistoryId;
        ELSE
            -- Insert a new Medical History record
            INSERT INTO Medical_History (HistoryId, Dates, Time_recorded, Condition, Surgeries, Medication)
            VALUES (p_HistoryId, p_HistoryDate, p_TimeRecorded, p_Condition, p_Surgeries, p_Medication);
        END IF;

        -- Check if the relationship already exists in Patients_Full_History
        SELECT COUNT(*) INTO v_ExistsPatientHistory
        FROM Patients_Full_History
        WHERE PatientId = p_PatientId AND HistoryId = p_HistoryId;

        IF v_ExistsPatientHistory = 0 THEN
            -- Insert the relationship if not exists
            INSERT INTO Patients_Full_History (PatientId, HistoryId)
            VALUES (p_PatientId, p_HistoryId);
        END IF;

        -- Commit the transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback in case of an error
            ROLLBACK;
            -- Raise the exception for further handling
            RAISE;
    END;
END InsertOrUpdatePatientHistory;
/


--call
BEGIN
    InsertOrUpdatePatientHistory(
        p_PatientId    => &Enter Patient ID: ,
        p_PhoneNo      => '&Enter Phone Number: ',
        p_Name         => '&Enter Patient Name: ',
        p_Address      => '&Enter Patient Address: ',
        p_Gender       => '&Enter Gender (e.g., M/F/O): ',
        p_HistoryId    => &Enter Medical History ID: ,
        p_HistoryDate  => TO_DATE('&Enter History Date (YYYY-MM-DD): ', 'YYYY-MM-DD'),
        p_TimeRecorded => TO_DATE('&Enter Time Recorded (YYYY-MM-DD): ', 'YYYY-MM-DD' ),
        p_Condition    => '&Enter Condition: ',
        p_Surgeries    => '&Enter Surgeries (if any):',
        p_Medication   => '&Enter Medication (if any): '
    );
END;
/




create or replace PROCEDURE delete_patient_info(id in number){
is
begin
    if id in(select patientid from patient) then
        delete from table diagnose where appointmentid in(select appointmentid from patientsattendappointments where patientid=id);
        delete from table appointments where appointmentid in(select appointmentid from patientsattendappointments where patientid=id);
        delete from table patientsattendappointments where patietid=id;

        delete from table doctorviewhistory where historyid in(select historyid from patientsfullHistory where patientid=id);
        delete from table medicalhistory where historyid in (select historyid from patientsfullHistory where patientid=id );
        delete from table patientFullHistory where patientid=id;
        
        delete from table patient where patientid=id;
        dbms_output.put_line("patient details are removed from database");
    end if ;
end;

}

create or replace PROCEDURE remove_doctor(id in number){
is
begin
    if id in (select doctorid from doctor) then
        delete from table doctorviewhistory where doctorid=id;
        update diagnose set doctorid=NULL where doctorid=id;
        delete from table DoctorsHaveSchedules where doctorid=id;
        delete from table doctor where doctorid=id;
        dbms_output.put_line("doctor has been remove from table");
    else 
        dbms_output.put_line("doctor is not found");
    end if;
end;
}
